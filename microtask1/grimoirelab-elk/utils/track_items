#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2015-2019 Bitergia
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Authors:
#   Alvaro del Castillo San Felix <acs@bitergia.com>
#

import argparse
import logging

from grimoire_elk.elastic import ElasticSearch
from grimoire_elk.track_items import fetch_track_items, get_gerrit_numbers, enrich_gerrit_items
from grimoire_elk.track_items import get_commits_from_gerrit, enrich_git_items

# Default values that can be changed from command line
GERRIT_INDEX_ENRICH = 'gerrit_opnfv_170207_enriched_170306'
GERRIT_INDEX_RAW = 'gerrit_openstack_170322'
GIT_INDEX_ENRICH = 'git_openstack_170313_enriched_170313'
GIT_INDEX_RAW = 'git_openstack_170313'
OPNFV_UPSTREAM_FILE = 'https://git.opnfv.org/doctor/plain/UPSTREAM'
PROJECT_NAME = 'openstack'  # upstream project name

logger = logging.getLogger(__name__)

def configure_logging(debug=False):
    """Configure logging
    The function configures log messages. By default, log messages
    are sent to stderr. Set the parameter `debug` to activate the
    debug mode.
    :param debug: set the debug mode
    """

    # Logging formats
    log_format = "[%(asctime)s] - %(message)s"
    debug_log_format = "[%(asctime)s - %(name)s - %(levelname)s] - %(message)s"


    if not debug:
        logging.basicConfig(level=logging.INFO,
                            format=log_format)
        logging.getLogger('requests').setLevel(logging.WARNING)
        logging.getLogger('urrlib3').setLevel(logging.WARNING)
    else:
        logging.basicConfig(level=logging.DEBUG,
                            format=debug_log_format)


def get_params():
    args_parser = argparse.ArgumentParser(usage="usage: track_items [options]",
                                          description="Track items from different data sources.")
    args_parser.add_argument("-e", "--elastic-url-raw", required=True,
                             help="ElasticSearch URL with raw indexes wich includes the items to track")
    args_parser.add_argument("--elastic-url-enrich", required=True,
                             help="ElasticSearch URL for enriched track items")
    args_parser.add_argument("-u", "--upstream-url", default=OPNFV_UPSTREAM_FILE,
                             help="URL with upstream file with the items to track")
    args_parser.add_argument('-g', '--debug', dest='debug', action='store_true')
    args_parser.add_argument("--index-gerrit-raw", default=GERRIT_INDEX_RAW,
                             help="ES index with gerrit raw items")
    args_parser.add_argument("--index-gerrit-enrich", default=GERRIT_INDEX_ENRICH,
                             help="ES index with gerrit enriched items")
    args_parser.add_argument("--index-git-raw", default=GIT_INDEX_RAW,
                             help="ES index with git raw items")
    args_parser.add_argument("--index-git-enrich", default=GIT_INDEX_ENRICH,
                             help="ES index with git enriched items")
    args_parser.add_argument("--project", default=PROJECT_NAME,
                             help="project to be used in enriched items")


    return args_parser.parse_args()

if __name__ == '__main__':

    args = get_params()
    configure_logging(args.debug)

    logger.info("Importing track items from %s ", args.upstream_url)

    total = 0

    #
    # Gerrit Reviews
    #
    gerrit_uris = fetch_track_items(args.upstream_url, "Gerrit")
    gerrit_numbers = get_gerrit_numbers(gerrit_uris)
    logger.info("Total gerrit track items to be imported: %i", len(gerrit_numbers))
    enriched_items = enrich_gerrit_items(args.elastic_url_raw,
                                         args.index_gerrit_raw, gerrit_numbers,
                                         args.project)
    logger.info("Total gerrit track items enriched: %i", len(enriched_items))
    elastic = ElasticSearch(args.elastic_url_enrich, args.index_gerrit_enrich)
    total = elastic.bulk_upload(enriched_items, "uuid")

    #
    # Git Commits
    #
    commits_sha = get_commits_from_gerrit(args.elastic_url_raw,
                                          args.index_gerrit_raw, gerrit_numbers)
    logger.info("Total git track items to be checked: %i", len(commits_sha))
    enriched_items = enrich_git_items(args.elastic_url_raw,
                                      args.index_git_raw, commits_sha,
                                      args.project)
    logger.info("Total git track items enriched: %i", len(enriched_items))
    elastic = ElasticSearch(args.elastic_url_enrich, args.index_git_enrich)
    total = elastic.bulk_upload(enriched_items, "uuid")
